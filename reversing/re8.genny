type uint64_t 8 [[u64]]
type int32_t 4 [[i32]]
type uint32_t 4 [[u32]]
type int16_t 2 [[i16]]
type uint16_t 2 [[u16]]
type uint8_t 1 [[u8]]
type float 4 [[f32]]
type char 1
type void 0
type wchar_t 2 [[u16]]
type bool 1 [[u8]]

namespace regenny{
struct TypeDefinition{}
struct ManagedVtable{}

namespace via.typeinfo{
struct TypeInfo {}
}

namespace via {
	struct vec3 {
		float x;
		float y;
		float z;
	};

	struct vec4 : vec3 {
		float w;
	};

	struct mat4 {
		float m[4][4];
	};

	struct Object {
		void* vtable;
	};
};

namespace via.clr {
    struct ManagedObject {
        ManagedVtable* info
        uint32_t reference_count
        uint32_t unk
    }
}

namespace via {
struct Camera : via.clr.ManagedObject {
};
};

namespace via {
    enum class CameraType : uint32_t {
        Game = 0,
        Debug = 1,
        Scene = 2,
        SceneXY = 3,
        SceneYZ = 4,
        SceneXZ = 5,
        Preview = 6,
    }

    enum class DisplayType : uint32_t {
        Fit = 0,
        Uniform4x3 = 1,
        Uniform16x9 = 2,
        Uniform16x10 = 3,
        Uniform21x9 = 4,
        Uniform32x9 = 5,
        Uniform48x9 = 6,
        Fix480p = 7,
        Fix720p = 8,
        Fix1080p = 9,
        Fix4K = 10,
        Fix8K = 11,
        FixResolution = 12,
        FixResolution16x9 = 13,
        NintendoSwitch = 14,
        Fix684x384 = 15,
        Fix1368x768 = 16,
        Nexus6P = 17,
        GalaxyS9 = 18,
        XperiaZ5Premium = 19,
        iPhoneX = 20,
        iPhone7 = 21,
        ZenPadS8 = 22,
    }


    enum class BasisPlane : uint32_t{
        XZ = 0,
        XY = 1,
        YZ = 2,
    }

    enum class MobileBarState : uint32_t{None = 0}
    enum class DeviceOrientation : uint32_t{None = 0}
    enum class RenderType : uint32_t{None = 0}

    struct Window{}
    struct Scene{}

    struct Color {
        uint32_t rgba
    }
    struct Size {
        float w
        float h
    }

	struct Point {
		float x;
		float y;
	};

	struct Window  0x100 {
        void* vtable
        uint32_t width @ 0x70
        uint32_t height
        via.Point cursor_pos;
        bool show_cursor;
		via.Size borderless_size @ 0xB0
	};

    struct SceneView : via.clr.ManagedObject 0xb0 {
        Window* window @ 0x10
        Scene* scene
        via.Color background_color @ 0x20
        wchar_t* name @ 0x28 [[utf16*]]
        via.Size size @ 0x30
		via.Size custom_display_size
		via.Size present_rect
        bool draw_develop @ 0x60
        bool tool_light
        bool show_icons
        bool outline_fadeout_enable
        DisplayType display_type
        via.BasisPlane basis_plane
        CameraType camera_type
        RenderType render_type
        int32_t icon_size
        float indicator_scale
        void* message_function_handle @ 0x90
        via.DeviceOrientation orientation @ 0x9C
        via.MobileBarState mobile_status_bar_state
        via.MobileBarState mobile_nav_bar_state
        bool fix_mobile_nav_bar_bottom
    }

    struct Scene : via.clr.ManagedObject{
        char asdf
        float timescale @ 0x20
    }

    struct SceneArray {
        int32_t count
        via.Scene** elements @ 0x8
    }
}

namespace via {
    struct SceneManager 0x1D8 {
        via.SceneView* main_view @ 0x48
        via.Scene* main_scene @ 0x50
        via.SceneArray scenes @ 0x78
    }
}

namespace via {
	struct Transform{};
	struct Folder{};

	struct GameObject : via.clr.ManagedObject 0x50 {
		bool Update @ 0x12;
		bool Draw;
		bool UpdateSelf;
		bool DrawSelf;
		via.Transform* Transform +2
		via.Folder* folder
		
		float timescale @ 0x4C
	};

	struct Component : via.clr.ManagedObject {
		via.GameObject* GameObject;
		via.Component* ChildComponent;
		via.Component* PrevComponent;
		via.Component* NextComponent;
	};

	struct Folder : via.clr.ManagedObject {
	};

	struct JointDesc {
		wchar_t* name [[utf16*]];
		uint32_t name_hash;
		int16_t parent_index;
		int16_t symmetry_index;
		via.vec4 position;
		via.vec4 rotation;
		via.vec4 scale;
	};
	
	struct Joint : via.clr.ManagedObject 0x60 {
		via.Transform* Owner;
		via.JointDesc* Desc;
		via.vec4 LocalPosition;
		via.vec4 LocalRotation;
		via.vec4 LocalScale
		int32_t ConstraintJointIndex;
		int32_t JointIndex;
	};
		
	// VMArray/REArray/whatever
	struct JointArray : via.clr.ManagedObject {
		via.typeinfo.TypeInfo* array_type
		int32_t count;
		int32_t num_allocated;
		Joint* joints[256];
	};

	struct Transform : via.Component 0x110 {
		via.vec4 Position @ 0x30
		via.vec4 Rotation @ 0x40
		via.vec4 Scale @ 0x50

		via.Scene* Scene 
		via.Transform* Child @ 0x68
		via.Transform* Next
		via.Transform* Parent
		via.mat4 WorldTransform
		void* JointHashTbl;
		int32_t ParentJointIndex
		int32_t UpdateFrame @ 0xCC
		bool SameJointsConstraint;
		bool DirtySelf;
		bool DirtyUpwards;
		bool AbsoluteScaling;
		JointArray* JointTbl + 4
		via.mat4* JointMatrixTbl;
	};

	struct JointData
    {
      via.vec4 rotation;
      via.vec4 translation;
      via.vec4 scale;
      via.vec4 blend;
    };


	struct JointMap {
		JointData* joints;
		int32_t num_joints + 4
	};

	struct Motion 0x1000 {
		JointMap jointmap @ 0x200
	};
}

namespace via {
	namespace motion {
		enum AxisDirection {
			X = 1,
			Y = 2,
			NZ = 7
		};
	}

struct Range {
	float s;
	float r;
};
}

namespace via.typeinfo {
    struct TypeInfo{
        void* vfptr
        uint32_t fqn_hash
        uint16_t attributes
        uint16_t type
        uint64_t fast_class_index
        uint64_t bsr_fast_class_index
        char* name [[utf8*]]
        uint32_t parent_typeid
        uint32_t size
        uint32_t crc
        uint32_t mics_flags
        via.typeinfo.TypeInfo* parent
        via.typeinfo.TypeInfo* child
        via.typeinfo.TypeInfo* next
        void* reflection
        TypeDefinition* type_definition
    }
}

namespace {
struct TypeDefinition 0x80 {
    uint64_t index : 18;
    uint64_t parent_typeid : 18;
    uint64_t declaring_typeid : 18;
    uint64_t underlying_typeid : 7;
    uint64_t object_type : 3;
    uint64_t array_typeid : 18;
    uint64_t element_typeid : 18;
    uint64_t impl_index : 18;
    uint64_t system_typeid : 10;

    uint32_t type_flags;
    uint32_t size;
    uint32_t fqn_hash;
    uint32_t type_crc;
    uint32_t default_ctor;
    uint32_t vt;
    uint32_t member_method;
    uint32_t member_field;

    // 0x0030
    uint32_t num_member_prop : 12;
    uint32_t member_prop : 19;

    uint32_t member_event;
    int32_t interfaces;
    int32_t generics;
    via.typeinfo.TypeInfo* type;
    ManagedVtable* managed_vt;
}

struct ManagedVtable {
	TypeDefinition* t
	void* funcs[32]
}
}

namespace {
struct DeserializeSequence {
    uint32_t code : 8;
    uint32_t size : 8;
    uint32_t align : 8;
    uint32_t depth : 6;
    uint32_t is_array : 1;
    uint32_t is_static : 1;
    
    uint32_t offset;
    TypeDefinition* native_type;
};
}

namespace tdb67 {
	struct MethodDefinition {
		uint64_t declaring_typeid : 17;
    	uint64_t invoke_id : 16;
    	uint64_t num_params : 6;
    	uint64_t unk : 8; // NOT REALLY SURE WHAT THIS IS? IT HAS SOMETHING TO DO WITH RETURN TYPE
    	uint64_t return_typeid : 17;
    
    	int16_t vtable_index @ 0xA;
    	uint32_t name_offset;
    	uint16_t flags;
    	uint16_t impl_flags;
    	uint32_t params; // bytepool
    	void* function;
	}

    struct TDB {
		struct test{}
        uint32_t magic
        uint32_t version
        uint32_t initialized
        uint32_t numTypes
        uint32_t numMethods
        uint32_t numFields
        uint32_t numProperties
        uint32_t numEvents
        uint32_t numUnk
        uint32_t maybeNumParams
        uint32_t maybeNumAttributes
        uint32_t numInitData
        uint32_t numInternStrings
        uint32_t numModules
        uint32_t devEntry
        uint32_t appEntry
        uint32_t numStringPool                
        uint32_t numBytePool
        void* modules
        TypeDefinition* types
		tdb67.MethodDefinition* methods
    }
}

namespace System {
	struct String : via.clr.ManagedObject 0x100 {
		int32_t len
		char data[256] [[utf16*]]
	};
};

namespace game {
	struct InputSystem : via.clr.ManagedObject 0x170 {
	};

	struct IkArmFit 0x100 {
		struct ArmSolver : via.clr.ManagedObject 0x30 {
			via.Joint* ApplyJoint;
			via.motion.AxisDirection Dir;
			via.motion.AxisDirection Up;
			via.motion.AxisDirection Rot;
			float L0;
			float L1;
		};

		struct ArmData : via.clr.ManagedObject 0x80 {
			float BlendRate;
			via.Range ReachRate;
			System.String* ApplyHandName + 4;
			bool LeftHand;
			float DefaultHandAngle + 3
			via.Range AxisYRange;
			via.Range AxisZRange
			via.mat4 TargetMatrix;
		};
	}
}

namespace via {
	namespace gui {
		struct GUIManager{}
	}

	struct array : via.clr.ManagedObject 0x100 {
		TypeDefinition* contained_type
		int32_t count
		int32_t allocated
	};

	struct JobSet {
		struct Job{};
	};

	struct fixed_array_jobs {
		via.JobSet.Job jobs[8];
	};

	struct JobSet {
		struct JobThing 0x100 {
			void* func;
		};

		struct Unk 0x100{
			void** vtable;
			via.Object* owner;
			void* func
			via.Object* owner2 + 8;
		};

    	Unk* data;
	};
	
	namespace gui {
		struct TransformObject {};
		struct View {};

		struct PrimitiveContext 0x300 {
			int32_t gui_camera @ 0xEC
		};

		struct GUIMeshRenderer 0x100 {
			
		};

		struct GUI : via.Component  0x2D0 {
			via.SceneView* SceneView;
			void* GUIResource;
			void* RtTextureHandle;
			void* GUISound;
			bool Enabled @ 0x50
			bool FailedSetup;
			uint8_t MaskLayerBits;
			uint8_t MaskLayerBits2;
			uint8_t MaskLayerBits3;
			uint32_t RenderOutputID @ 0x58
			float PlaySpeed @ 0x5C
			uint32_t Segment;
			uint32_t SoftParticleDistType @ 0x64
			float SoftParticleDist;
			View* View + 4;
		};

		struct Control : TransformObject 0x1B0 {
			uint32_t StatePattern @ 0x124
			float PlayFrame @ 0x128
			via.vec4 ColorScale
			via.vec3 ColorOffset
			float Saturation
			bool UseGUISound @ 0x188
		};

		struct Window : Control 0x1C0 {
			bool Open
		};

		struct View : Window 0x1E0 {
			bool Overlay @ 0x1C0
			bool DepthTest;
			bool DetoneMap;
			bool CoordCorrection;
			uint32_t ViewType @ 0x1C4;
			uint32_t ReprojectionType+4;
			via.Size ScreenSize ;
			float BaseFps @ 0x1D8
			bool UseGUICamera
		};
	
		struct PlayObject : via.clr.ManagedObject 0x50 {
			wchar_t* Name [[utf16*]]
			GUI* Component;
			Control* Parent @ 0x28
			PlayObject* Next;
			PlayObject* Prev;
			
			uint16_t Priority @ 0x42

			uint8_t pad @ 0x47

			// Render flags
			uint64_t Visible : 1; // 1
            uint64_t Visible2 : 1; // 2
            uint64_t HitVisible : 1; // 3
            uint64_t ShouldPlay : 1; // 4
            uint64_t IsPlaying : 1; // 5
            uint64_t IsInteractive : 1; // 6
            uint64_t HasName : 1; // 7
            uint64_t HasTag : 1; // 8
            uint64_t SequenceAsset : 1; // 9
            uint64_t IsPNG : 1; // 10
            uint64_t IsJPG : 1; // 11
            uint64_t LinearAlphaBlend : 1; // 12
            uint64_t CompOwnership : 1; // 13
            uint64_t DuplicateRoot : 1; // 14
            uint64_t DataBind : 1; // 15
            uint64_t DataBinding : 1;  // 16
            uint64_t AllocExData : 1;  // 17
            uint64_t NextStateEnable : 1; // 18
            uint64_t _Unk : 1;  // 19
            uint64_t _Unk2 : 1;  // 20
            uint64_t ResolutionAdjust : 1; // 21
            uint64_t UniqueVisible : 1; // 22
            uint64_t EffectAlphaType : 1; // 23
            uint64_t HasOverrideProp : 1; // 24
            uint64_t IsCapturable : 1; // 25
            uint64_t ForceInvisible : 1; // 26
            uint64_t ClipPlaying : 1; // 27
            uint64_t BlendType : 2; // 28-29
            uint64_t MaskType : 3; // 30 - 32
            uint64_t MaskMode : 3; // 33 - 35
            uint64_t ColorType : 2; // 36 - 37
            uint64_t ControlPoint : 4; // 38 - 41
            uint64_t ResolutionCond : 2; // 42 - 43
            uint64_t ResolutionScale : 2; // 44 - 45
            uint64_t UVType : 2; // 46 - 47
            uint64_t UnkFlags : 17;
		};

		struct TransformObject : PlayObject 0x120 {
		};

		struct GUIManager 0x1A0 {
			via.JobSet update_task @ 0xe0
			via.JobSet draw_task @ 0x120;
		};
	}
}

namespace via {
struct Sphere 0x10 {
	via.vec3 pos;
	float r;
};

struct Capsule 0x30 {
	via.vec4 p0;
	via.vec4 p1;
	float r;
};

struct OBB {
	via.mat4 coord;
	via.vec3 extent;
};

struct Plane {
	via.vec3 normal;
	float dist;
};

namespace motion {
struct ChainCollisionArray{};
struct ChainCollisionData{};

struct ChainCollisions 0x160 {
	uint32_t order;
	via.Sphere sphere+0xc;
	via.Capsule capsule;
	via.OBB obb;
	via.Plane plane;
	via.vec4 offset @ 0xB0;
	via.vec4 pair_offset;
	via.Joint* joint @ 0x110
	via.Joint* pair_joint
	ChainCollisionData* data;
	ChainCollisionArray* owner;
	float radius;
	float radius2;
	int32_t d;
	float lerp;
	int32_t pad2;
	uint32_t flags;

	//unk ???
};

struct ChainCollisionData {
	void* sub_data;
	via.vec3 pos;
	via.vec3 pair_pos;
	uint32_t joint_hash;
	uint32_t pair_joint_hash;
	float radius;
	float lerp;
	uint8_t shape_type;
	uint8_t div;
	uint8_t num_sub_data;
	uint8_t unk;
	uint32_t flags;
	uint32_t unk;
};

struct ChainCollisionTop 0x100 {
	ChainCollisions* collisions;
	uint32_t num_collisions;
	uint32_t allocated_collisions
	via.Transform* owner_transform;
	via.Transform* parent_transform;
	float scale;
	float parent_scale;
};

struct ChainCollisionArray {
	ChainCollisionTop* collisions
	int32_t num;
	int32_t num_allocated;
	int32_t preset_id;
};

struct SecondaryAnimation : via.Component 0x48 {
};

struct Chain : via.motion.SecondaryAnimation 0x220 {
	ChainCollisionArray CollisionData @ 0x58;
	float BlendRate @ 0xEC
	float FreezeRate @ 0xF0
	float StepFrame @ 0x130
	uint32_t CalculateMode @ 0x208
	uint32_t GravityCoord @ 0x210
};
}
}


namespace via {
namespace render{
enum class UsageType : uint32_t {
	Default = 0,
	Immutable = 1,
	Dynamic = 2,
	Staging = 3,
};

enum class TextureFormat : uint32_t {
        Unknown = 0,
        R32G32B32A32Typeless = 1,
        R32G32B32A32Float = 2,
        R32G32B32A32Uint = 3,
        R32G32B32A32Sint = 4,
        R32G32B32Typeless = 5,
        R32G32B32Float = 6,
        R32G32B32Uint = 7,
        R32G32B32Sint = 8,
        R16G16B16A16Typeless = 9,
        R16G16B16A16Float = 10,
        R16G16B16A16Unorm = 11,
        R16G16B16A16Uint = 12,
        R16G16B16A16Snorm = 13,
        R16G16B16A16Sint = 14,
        R32G32Typeless = 15,
        R32G32Float = 16,
        R32G32Uint = 17,
        R32G32Sint = 18,
        R32G8X24Typeless = 19,
        D32FloatS8X24Uint = 20,
        R32FloatX8X24Typeless = 21,
        X32TypelessG8X24Uint = 22,
        R10G10B10A2Typeless = 23,
        R10G10B10A2Unorm = 24,
        R10G10B10A2Uint = 25,
        R11G11B10Float = 26,
        R8G8B8A8Typeless = 27,
        R8G8B8A8Unorm = 28,
        R8G8B8A8UnormSrgb = 29,
        R8G8B8A8Uint = 30,
        R8G8B8A8Snorm = 31,
        R8G8B8A8Sint = 32,
        R16G16Typeless = 33,
        R16G16Float = 34,
        R16G16Unorm = 35,
        R16G16Uint = 36,
        R16G16Snorm = 37,
        R16G16Sint = 38,
        R32Typeless = 39,
        D32Float = 40,
        R32Float = 41,
        R32Uint = 42,
        R32Sint = 43,
        R24G8Typeless = 44,
        D24UnormS8Uint = 45,
        R24UnormX8Typeless = 46,
        X24TypelessG8Uint = 47,
        R8G8Typeless = 48,
        R8G8Unorm = 49,
        R8G8Uint = 50,
        R8G8Snorm = 51,
        R8G8Sint = 52,
        R16Typeless = 53,
        R16Float = 54,
        D16Unorm = 55,
        R16Unorm = 56,
        R16Uint = 57,
        R16Snorm = 58,
        R16Sint = 59,
        R8Typeless = 60,
        R8Unorm = 61,
        R8Uint = 62,
        R8Snorm = 63,
        R8Sint = 64,
        A8Unorm = 65,
        R1Unorm = 66,
        R9G9B9E5Sharedexp = 67,
        R8G8B8G8Unorm = 68,
        G8R8G8B8Unorm = 69,
        Bc1Typeless = 70,
        Bc1Unorm = 71,
        Bc1UnormSrgb = 72,
        Bc2Typeless = 73,
        Bc2Unorm = 74,
        Bc2UnormSrgb = 75,
        Bc3Typeless = 76,
        Bc3Unorm = 77,
        Bc3UnormSrgb = 78,
        Bc4Typeless = 79,
        Bc4Unorm = 80,
        Bc4Snorm = 81,
        Bc5Typeless = 82,
        Bc5Unorm = 83,
        Bc5Snorm = 84,
        B5G6R5Unorm = 85,
        B5G5R5A1Unorm = 86,
        B8G8R8A8Unorm = 87,
        B8G8R8X8Unorm = 88,
        R10G10B10xrBiasA2Unorm = 89,
        B8G8R8A8Typeless = 90,
        B8G8R8A8UnormSrgb = 91,
        B8G8R8X8Typeless = 92,
        B8G8R8X8UnormSrgb = 93,
        Bc6hTypeless = 94,
        Bc6hUF16 = 95,
        Bc6hSF16 = 96,
        Bc7Typeless = 97,
        Bc7Unorm = 98,
        Bc7UnormSrgb = 99,
        ViaExtension = 1024,
        Astc4x4Typeless = 1025,
        Astc4x4Unorm = 1026,
        Astc4x4UnormSrgb = 1027,
        Astc5x4Typeless = 1028,
        Astc5x4Unorm = 1029,
        Astc5x4UnormSrgb = 1030,
        Astc5x5Typeless = 1031,
        Astc5x5Unorm = 1032,
        Astc5x5UnormSrgb = 1033,
        Astc6x5Typeless = 1034,
        Astc6x5Unorm = 1035,
        Astc6x5UnormSrgb = 1036,
        Astc6x6Typeless = 1037,
        Astc6x6Unorm = 1038,
        Astc6x6UnormSrgb = 1039,
        Astc8x5Typeless = 1040,
        Astc8x5Unorm = 1041,
        Astc8x5UnormSrgb = 1042,
        Astc8x6Typeless = 1043,
        Astc8x6Unorm = 1044,
        Astc8x6UnormSrgb = 1045,
        Astc8x8Typeless = 1046,
        Astc8x8Unorm = 1047,
        Astc8x8UnormSrgb = 1048,
        Astc10x5Typeless = 1049,
        Astc10x5Unorm = 1050,
        Astc10x5UnormSrgb = 1051,
        Astc10x6Typeless = 1052,
        Astc10x6Unorm = 1053,
        Astc10x6UnormSrgb = 1054,
        Astc10x8Typeless = 1055,
        Astc10x8Unorm = 1056,
        Astc10x8UnormSrgb = 1057,
        Astc10x10Typeless = 1058,
        Astc10x10Unorm = 1059,
        Astc10x10UnormSrgb = 1060,
        Astc12x10Typeless = 1061,
        Astc12x10Unorm = 1062,
        Astc12x10UnormSrgb = 1063,
        Astc12x12Typeless = 1064,
        Astc12x12Unorm = 1065,
        Astc12x12UnormSrgb = 1066,
        ForceUint = 2147483647,
};

enum class TextureStreamingType : uint32_t {
	None = 0,
	Streaming = 1,
	HighMap = 2,
};

struct Poop 0x1000 {
};

struct RenderResource {
    //void* vtable;
	Poop* unkpoop;
    int32_t ref_count @ 8;
    uint32_t render_frame
};

struct TextureDesc {
	uint32_t width;
	uint32_t height;
	uint32_t depth;
	uint32_t mip;
	uint32_t arr;
	via.render.TextureFormat format;
	uint32_t sample_desc_count;
	uint32_t sample_desc_quality;
	via.render.UsageType usage_type;
	uint32_t bind_flags;
	uint32_t option_flags;
	via.render.TextureStreamingType streaming_type;
	uint32_t unk;
	uint64_t alloc_thing + 4;
	uint32_t tile;
	void* unkptr + 4;
};

struct DXResource : via.render.RenderResource {
	struct ID3D12Resource* dx_resource;
	void* destructor;
};

struct Texture : RenderResource {
    via.render.UsageType usage_type;
    TextureDesc desc + 4;
	uint32_t vram;
	uint32_t pad_;
};

struct TextureDX12 : Texture 0x1000 {
    uint16_t index;
	DXResource* unk_resource + 6;
	uint32_t last_frame;
	uint32_t locked_thing;
	uint32_t scale;
	bool b1;
	bool b2;

	DXResource* resource @ 0x98
	// IDK
};

struct LayerArray {
    struct via.render.RenderLayer** elements
    uint32_t num;
    uint32_t num_allocated;
};

struct RTL_CRITICAL_SECTION
{
  struct RTL_CRITICAL_SECTION_DEBUG *DebugInfo;
  int32_t LockCount;
  int32_t RecursionCount;
  void* OwningThread;
  void* LockSemaphore;
  uint64_t SpinCount;
};

struct RenderLayer : via.clr.ManagedObject 0x88 {
    uint32_t m_id;
    uint32_t m_render_output_id;
    uint32_t m_render_output_id_2;
    uint32_t m_priority;
	uint32_t m_priority_offsets[7];
    via.render.RenderLayer* m_parent + 4;
    LayerArray layers @ 0x48;  
    RTL_CRITICAL_SECTION m_mutex;
    uint32_t version
};

namespace layer{
struct Scene : via.render.RenderLayer 0x1560 {
    via.Camera* camera;
    struct via.render.Mirror* mirror;
    struct via.render.TargetState* buffer_pre_z;
	struct via.render.TargetState* depth_target @ 0x100;
    struct via.render.TargetState* velocity_target @ 0x110;
	struct via.render.Texture* depth_stencil_tex @ 0x470;
};
}

struct SceneInfo {
  via.mat4 view_proj_matrix;
  via.mat4 view_matrix;
  via.mat4 inverse_view_matrix;
  via.mat4 projection_matrix;
  via.mat4 inverse_projection_matrix;
  via.mat4 inverse_view_projection_matrix;
  via.mat4 old_view_projection_matrix;
  via.vec3 camera_pos;
  float z_near;
  via.vec3 camera_dir;
  float z_far;
  via.vec4 view_frustum[6];
  via.vec3 z_linear;
  float pixel_cull;
  float screen_size[2];
  float screen_size_inverse[2];
  via.vec4 clip_plane;
  float subdivision;
  float variable_rate_shading_threshold;
};
}
}
}